package cherry.sqlapp.db.gen.mapper;

import cherry.sqlapp.db.gen.dto.SqltoolStatement;
import cherry.sqlapp.db.gen.dto.SqltoolStatementCriteria;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.type.JdbcType;

public interface SqltoolStatementMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @SelectProvider(type=SqltoolStatementSqlProvider.class, method="countByExample")
    int countByExample(SqltoolStatementCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @DeleteProvider(type=SqltoolStatementSqlProvider.class, method="deleteByExample")
    int deleteByExample(SqltoolStatementCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @Delete({
        "delete from SQLTOOL_STATEMENT",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @Insert({
        "insert into SQLTOOL_STATEMENT (DATABASE_NAME, QUERY, ",
        "PARAM_MAP, UPDATED_AT, ",
        "CREATED_AT, LOCK_VERSION, ",
        "DELETED_FLG)",
        "values (#{databaseName,jdbcType=VARCHAR}, #{query,jdbcType=VARCHAR}, ",
        "#{paramMap,jdbcType=VARCHAR}, #{updatedAt,jdbcType=TIMESTAMP}, ",
        "#{createdAt,jdbcType=TIMESTAMP}, #{lockVersion,jdbcType=INTEGER}, ",
        "#{deletedFlg,jdbcType=INTEGER})"
    })
    @Options(useGeneratedKeys=true,keyProperty="id")
    int insert(SqltoolStatement record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @InsertProvider(type=SqltoolStatementSqlProvider.class, method="insertSelective")
    @Options(useGeneratedKeys=true,keyProperty="id")
    int insertSelective(SqltoolStatement record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @SelectProvider(type=SqltoolStatementSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="DATABASE_NAME", property="databaseName", jdbcType=JdbcType.VARCHAR),
        @Result(column="QUERY", property="query", jdbcType=JdbcType.VARCHAR),
        @Result(column="PARAM_MAP", property="paramMap", jdbcType=JdbcType.VARCHAR),
        @Result(column="UPDATED_AT", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="CREATED_AT", property="createdAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="LOCK_VERSION", property="lockVersion", jdbcType=JdbcType.INTEGER),
        @Result(column="DELETED_FLG", property="deletedFlg", jdbcType=JdbcType.INTEGER)
    })
    List<SqltoolStatement> selectByExampleWithRowbounds(SqltoolStatementCriteria example, RowBounds rowBounds);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @SelectProvider(type=SqltoolStatementSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="DATABASE_NAME", property="databaseName", jdbcType=JdbcType.VARCHAR),
        @Result(column="QUERY", property="query", jdbcType=JdbcType.VARCHAR),
        @Result(column="PARAM_MAP", property="paramMap", jdbcType=JdbcType.VARCHAR),
        @Result(column="UPDATED_AT", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="CREATED_AT", property="createdAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="LOCK_VERSION", property="lockVersion", jdbcType=JdbcType.INTEGER),
        @Result(column="DELETED_FLG", property="deletedFlg", jdbcType=JdbcType.INTEGER)
    })
    List<SqltoolStatement> selectByExample(SqltoolStatementCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "ID, DATABASE_NAME, QUERY, PARAM_MAP, UPDATED_AT, CREATED_AT, LOCK_VERSION, DELETED_FLG",
        "from SQLTOOL_STATEMENT",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="DATABASE_NAME", property="databaseName", jdbcType=JdbcType.VARCHAR),
        @Result(column="QUERY", property="query", jdbcType=JdbcType.VARCHAR),
        @Result(column="PARAM_MAP", property="paramMap", jdbcType=JdbcType.VARCHAR),
        @Result(column="UPDATED_AT", property="updatedAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="CREATED_AT", property="createdAt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="LOCK_VERSION", property="lockVersion", jdbcType=JdbcType.INTEGER),
        @Result(column="DELETED_FLG", property="deletedFlg", jdbcType=JdbcType.INTEGER)
    })
    SqltoolStatement selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @UpdateProvider(type=SqltoolStatementSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") SqltoolStatement record, @Param("example") SqltoolStatementCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @UpdateProvider(type=SqltoolStatementSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") SqltoolStatement record, @Param("example") SqltoolStatementCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @UpdateProvider(type=SqltoolStatementSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(SqltoolStatement record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SQLTOOL_STATEMENT
     *
     * @mbggenerated
     */
    @Update({
        "update SQLTOOL_STATEMENT",
        "set DATABASE_NAME = #{databaseName,jdbcType=VARCHAR},",
          "QUERY = #{query,jdbcType=VARCHAR},",
          "PARAM_MAP = #{paramMap,jdbcType=VARCHAR},",
          "UPDATED_AT = #{updatedAt,jdbcType=TIMESTAMP},",
          "CREATED_AT = #{createdAt,jdbcType=TIMESTAMP},",
          "LOCK_VERSION = #{lockVersion,jdbcType=INTEGER},",
          "DELETED_FLG = #{deletedFlg,jdbcType=INTEGER}",
        "where ID = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(SqltoolStatement record);
}